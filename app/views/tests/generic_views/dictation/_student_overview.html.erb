<% test = Test.find(key)%>
<% if online %>
  <div class="dropdown text-right" id="p<%=key%>">
    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenuPrint" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
      <span class="glyphicon glyphicon-print" style="color:#337AB7"></span>
      <span class="caret"></span>
    </button>
    <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuPrint">
      <!-- Imitate a link-->
      <li onclick="generatePDF(true, <%=key%>)"  style="padding: 3px 20px">Alles</li>
      <li onclick="generatePDF(false, <%=key%>)" style="padding: 3px 20px">Nur Graph</li>
    </ul>
  </div>
<% end %>

<!-- Imitate a link-->
<style>
  li:hover{
    background-color: #f5f5f5;
    cursor: pointer;
  }
</style>

<ul id="tabs" class="nav nav-pills" role="tablist">
  <li role="presentation" class="active"><a href="#standard<%=key%>" aria-controls="standard<%=key%>" role="tab" data-toggle="tab" onclick="showDropDown(<%=key%>)">Lernverlauf</a></li>
  <li role="presentation"><a href="#spelling<%=key%>" aria-controls="spelling<%=key%>" role="tab" data-toggle="tab" onclick="createChart(<%=key%>)">Prinzipienauswertung</a></li>
 <!--<li role="presentation"><a href="#test<%=key%>" aria-controls="test<%=key%>" role="tab" data-toggle="tab" onclick="test(<%=key%>)">Lerngraph</a></li>-->
</ul>
<br/>

<div class="tab-content">
  <div role="tabpanel" class="tab-pane active" id="standard<%=key%>">
    <div id="chart<%=key%>"  >
    </div>
  </div>
  <div role="tabpanel" class="tab-pane " id="spelling<%=key%>">
    <div id="chartSpelling<%=key%>" style="text-align: center" >
    </div>
  </div>
</div>




<style>
  .bar1 {
    fill: orange;
    opacity: 0.7;
  }

  .bar2 {
       fill: steelblue;
       opacity: 0.6;
  }

  .axis {
    font: 16px sans-serif;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .axis text {
    font: 16px sans-serif;
  }
  .x.axis path {
    display: none;
  }

  .d3-tip {
    line-height: 1;
    font-weight: bold;
    padding: 12px;
    background: rgb(255,255,255);
    border-radius: 2px;
    font: 12px sans-serif;
  }
  .infoTd{
     border: 1px solid black;
     padding-bottom: 2px;
     padding-top: 2px;
  }


</style>

<script>
    var dataSpelling=[];

  <%if results.length==1%>
    dataSpelling = [
        {
            "description": "Phonographisch-Silbisches Prinzip",
            "bar1": <%= ((1 - results[0].extra_data["principle"]["psError"].to_f/(results[0].extra_data["principle"]["psCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
            "bar2": 0,
            "bar3": <%= results[0].extra_data["principle"]["psError"]%>,
            "bar4": <%= results[0].extra_data["principle"]["psCount"]%>,
            "bar5": 0,
            "bar6": 0
        },
        {
            "description": "Morphologisches Prinzip",
            "bar1": <%= ((1 -results[0].extra_data["principle"]["mpError"].to_f/(results[0].extra_data["principle"]["mpCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
            "bar2":0,
            "bar3": <%= results[0].extra_data["principle"]["mpError"]%>,
            "bar4": <%= results[0].extra_data["principle"]["mpCount"]%>,
            "bar5": 0,
            "bar6": 0
        },
        {
            "description": "Wortbildungsprinzip",
            "bar1": <%= ((1 - results[0].extra_data["principle"]["wbError"].to_f/(results[0].extra_data["principle"]["wbCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
            "bar2": 0,
            "bar3": <%= results[0].extra_data["principle"]["wbError"]%>,
            "bar4": <%= results[0].extra_data["principle"]["wbCount"]%>,
            "bar5": 0,
            "bar6": 0
        },
        {
            "description": "Peripheriebereich",
            "bar1": <%= ((1 - results[0].extra_data["principle"]["pbError"].to_f/(results[0].extra_data["principle"]["pbCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
            "bar2": 0,
            "bar3": <%= results[0].extra_data["principle"]["pbError"]%>,
            "bar4": <%= results[0].extra_data["principle"]["pbCount"]%>,
            "bar5": 0,
            "bar6": 0
        }
    ]
  <%else %>
    <%lastTwoResults = results.last(2) %>
    dataSpelling = [
        {
          "description": "Phonographisch-Silbisches Prinzip",
          "bar1": <%= ((1 - lastTwoResults[1].extra_data["principle"]["psError"].to_f/(lastTwoResults[1].extra_data["principle"]["psCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar2": <%= ((1 - lastTwoResults[0].extra_data["principle"]["psError"].to_f/(lastTwoResults[0].extra_data["principle"]["psCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar3": <%= lastTwoResults[1].extra_data["principle"]["psError"]%>,
          "bar4": <%= lastTwoResults[1].extra_data["principle"]["psCount"]%>,
          "bar5": <%= lastTwoResults[0].extra_data["principle"]["psError"]%>,
          "bar6": <%= lastTwoResults[0].extra_data["principle"]["psCount"]%>
        },
        {
          "description": "Morphologisches Prinzip",
          "bar1": <%= ((1 -lastTwoResults[1].extra_data["principle"]["mpError"].to_f/(lastTwoResults[1].extra_data["principle"]["mpCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar2": <%= ((1 -lastTwoResults[0].extra_data["principle"]["mpError"].to_f/(lastTwoResults[0].extra_data["principle"]["mpCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar3": <%= lastTwoResults[1].extra_data["principle"]["mpError"]%>,
          "bar4": <%= lastTwoResults[1].extra_data["principle"]["mpCount"]%>,
          "bar5": <%= lastTwoResults[0].extra_data["principle"]["mpError"]%>,
          "bar6": <%= lastTwoResults[0].extra_data["principle"]["mpCount"]%>
        },
        {
          "description": "Wortbildungsprinzip",
          "bar1": <%= ((1 - lastTwoResults[1].extra_data["principle"]["wbError"].to_f/(lastTwoResults[1].extra_data["principle"]["wbCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar2": <%= ((1 - lastTwoResults[0].extra_data["principle"]["wbError"].to_f/(lastTwoResults[0].extra_data["principle"]["wbCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar3": <%= lastTwoResults[1].extra_data["principle"]["wbError"]%>,
          "bar4": <%= lastTwoResults[1].extra_data["principle"]["wbCount"]%>,
          "bar5": <%= lastTwoResults[0].extra_data["principle"]["wbError"]%>,
          "bar6": <%= lastTwoResults[0].extra_data["principle"]["wbCount"]%>
        },
        {
          "description": "Peripheriebereich",
          "bar1": <%= ((1 - lastTwoResults[1].extra_data["principle"]["pbError"].to_f/(lastTwoResults[1].extra_data["principle"]["pbCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar2": <%= ((1 - lastTwoResults[0].extra_data["principle"]["pbError"].to_f/(lastTwoResults[0].extra_data["principle"]["pbCount"].nonzero? || 1).to_f).round(2)*100).to_i%>,
          "bar3": <%= lastTwoResults[1].extra_data["principle"]["pbError"]%>,
          "bar4": <%= lastTwoResults[1].extra_data["principle"]["pbCount"]%>,
          "bar5": <%= lastTwoResults[0].extra_data["principle"]["pbError"]%>,
          "bar6": <%= lastTwoResults[0].extra_data["principle"]["pbCount"]%>
        }
    ]
  <%end%>




  //Flag damit der Graph nicht mehrmals erzeugt wird <-ggf. aufpassen Tabs wechseln in der Praxis?
  var graphExists = [];
    function createChart(chartNumber) {
        $("#p" + chartNumber).hide();
        var checkIFGraphExists =false;
        for (var i = 0; i < graphExists.length; i++) {
            if(graphExists[i]==chartNumber){
                checkIFGraphExists = true;
            }
        }

        if(!checkIFGraphExists){
            $('#chartSpelling' + chartNumber).ready(function () {


                // set the dimensions and margins of the graph
                var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 1400 - margin.left - margin.right,
                    height = 320 - margin.top - margin.bottom;

                // set the ranges
                var x = d3.scaleBand()
                    .range([0, width])
                    .padding(0.1);

                var y = d3.scaleLinear()
                    .range([height, 0]);

                // append the svg object to the body of the page
                // append a 'group' element to 'svg'
                // moves the 'group' element to the top left margin
                var svg = d3.select('#chartSpelling' + chartNumber).append("svg")
                    .attr("width", "100%")
                    .style("max-height", "320px")
                    .attr("viewBox", "0 0 "+ (width + margin.left + margin.right) +" 320")
                    .attr("preserveAspectRatio", "xMidYMid meet")
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform",
                        "translate(" + margin.left + "," + margin.top + ")");



                // Scale the range of the data in the domain
                x.domain(dataSpelling.map(function (d) {
                    return d.description;
                }));

                y.domain([0, 100]);


                //Tip
                var tip = d3.tip()
                    .attr('class', 'd3-tip')
                    .offset([-10, 0])
                    .html(function(d) {
                        return buildTooltip(d.description,d.bar1,d.bar2,d.bar3,d.bar4,d.bar5,d.bar6);
                    })
                svg.call(tip);

                d3.selectAll('.x .tick')
                    .data(dataSpelling)
                    .on('mouseover', tip.show)
                    .on('mouseout', tip.hide);



                // append the rectangles for the bar chart (Orange)
                svg.selectAll(".bar")
                    .data(dataSpelling)
                    .enter().append("rect")
                    .attr("class", "bar1")
                    .attr("x", function (d) {
                        return x(d.description)+20;
                    })
                    .attr("width", x.bandwidth()/2-20)
                    .attr("y", function (d) {
                        return y(d.bar1);
                    })
                    .attr("height", function (d) {
                        return height - y(d.bar1);
                    })
                    .on('mouseover', tip.show)
                    .on('mouseout', tip.hide);

                // append the rectangles for the bar chart(Blau)
                svg.selectAll(".bar")
                    .data(dataSpelling)
                    .enter().append("rect")
                    .attr("class", "bar2")
                    .attr("x", function (d) {
                        return x(d.description)+ x.bandwidth()/2;
                    })
                    .attr("width", x.bandwidth()/2-20)
                    .attr("y", function (d) {
                        return y(d.bar2);
                    })
                    .attr("height", function (d) {
                        return height - y(d.bar2);
                    })
                    .on('mouseover', tip.show)
                    .on('mouseout', tip.hide);


                // add the x Axis
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .attr("class", "axis")
                    .call(d3.axisBottom(x));

                // add the y Axis
                svg.append("g")
                    .attr("class", "axis")
                    .call(d3.axisLeft(y));

                //Richtlienen für Werte auf der y-Achse
                svg.selectAll("line.horizontalGrid").data(y.ticks(2)).enter()
                    .append("line")
                    .attr("class", "horizontalGrid")
                    .attr("x1" , margin.right)
                    .attr("x2",width)
                    .attr("y1" , function(d){ return y(d);})
                    .attr("y2" , function(d){ return y(d);})
                    .attr("fill" , "none")
                    .attr("shape-rendering" , "crispEdges")
                    .attr("stroke" , "#888888")
                    .attr("stroke-width" , "1px")
                    .style("stroke-dasharray", "5 5");

            });
            graphExists = graphExists + [chartNumber];
        }
    }

    function showDropDown(testNumber) {
        $("#p" + testNumber).show();
    }

    function buildTooltip(description, bar1, bar2, bar3, bar4, bar5, bar6) {
        var tooltip='' +
        '<table style="border:1px solid black; width: 270px"> ' +
        '<tr>' +
        '    <th class="infoTd" colspan="2" style="padding-left: 4px; padding-right: 4px">' + description+
        '    </th>' +
        '  </tr>' +
        '  <tr>' +
        '    <td class="infoTd">' +
        '      <span style="background-color:rgba(255,165,0, 0.7);width: 10px;height: 10px;margin-right: 6px;display: inline-block;"></span>Aktueller Wert' +
        '    </td>' +
        '    <td class="infoTd">' + bar1+ '%'+
        '    </td>' +
        '  </tr>' +
        '  <tr>' +
        '    <td class="infoTd">' +
        '      <span style="width: 10px;height: 10px;margin-right: 6px;display: inline-block;"></span>- Fehler in Lupenstellen' +
        '    </td>' +
        '    <td class="infoTd">' + bar3+
        '    </td>' +
        '  </tr>' +
        '  <tr>' +
        '    <td class="infoTd">' +
        '      <span style="width: 10px;height: 10px;margin-right: 6px;display: inline-block;"></span>- Anzahl der Lupenstellen' +
        '    </td>' +
        '    <td class="infoTd">' + bar4+
        '    </td>' +
        '  </tr>' +
        '  <tr>' +
        '    <td class="infoTd">' +
        '      <span style="background-color:rgba(70,130,180,0.6);width: 10px;height: 10px;margin-right: 6px;display: inline-block;"></span>Letzter Wert' +
        '    </td>' +
        '    <td class="infoTd">' + bar2+'%'+
        '    </td>' +
        '  </tr>' +
        '  <tr>' +
        '    <td class="infoTd">' +
        '      <span style="width: 10px;height: 10px;margin-right: 6px;display: inline-block;"></span>- Fehler in Lupenstellen' +
        '    </td>' +
        '    <td class="infoTd">' + bar5+
        '    </td>' +
        '  </tr>' +
        '  <tr>' +
        '    <td class="infoTd">' +
        '      <span style="width: 10px;height: 10px;margin-right: 6px;display: inline-block;"></span>- Anzahl der Lupenstellen' +
        '    </td>' +
        '    <td class="infoTd">' + bar6+
        '    </td>' +
        '  </tr>' +
        '</table>'
        return tooltip

    }


</script>



<script type="text/javascript" charset="utf-8">
  //Create a graph (svg-object)
    var chart<%=key%> = c3.generate({
        oninit: function() {
            this.svg.attr('id', 'svgFor<%=key%>')
        },
        bindto: '#chart<%=key%>',
        data: {
            x: 'x',
            columns: [
                ['x',
                    <% results.each do |r| %>
                    '<%= r.measurement.date.to_date %>',
                    <% end %>
                ],
                ['student',
                    <% max = 0 %>
                    <% results.each do |r| %>
                    <%if !r.measurement.max.nil? && r.measurement.max > max %>
                    <% max = r.measurement.max %>
                    <% end %>
                    <% unless r.nil? %>
                    <%= r.score.nil? ? "null" : r.score %>
                    <% else %>
                    null
                    <% end %>,
                    <% end %>
                ],
                ['n75',
                    <% results.each do |r| %>
                    <% unless r.nil? %>
                    <%= r.measurement.max.nil? ? "null" : r.measurement.third_quart %>
                    <% else %>
                    null
                    <% end %>,
                    <% end %>
                ],
                ['n25',
                    <% results.each do |r| %>
                    <% unless r.nil? %>
                    <%= r.measurement.min.nil? ? "null" : r.measurement.first_quart %>
                    <% else %>
                    null
                    <% end %>,
                    <% end %>
                ],
                ['n50',
                    <% results.each do |r| %>
                    <% unless r.nil? %>
                    <%= r.measurement.average.nil? ? "null" : r.measurement.median %>
                    <% else %>
                    null
                    <% end %>,
                    <% end %>
                ]
            ],
            names: {
                student: studentsCrypt['<%=@group.id%>']['<%=@student.id%>'],
                n75: '75% Niveau der Klasse',
                n25: '25% Niveau der Klasse',
                n50: '50% Niveau der Klasse'
            },
        },
        color: {
            pattern: ['#46B8DA', '#5CB85C', '#D9534F', '#F0AD4E']
        },
        axis: {
            x: {
                type: 'timeseries',
                tick: {
                    fit: true,
                    format: "%e %b %y"
                },
                label: {
                    text: 'Testzeitpunkte',
                    position: 'outer-left'
                }
            },
            y: {
                label: {
                    text: 'Anzahl richtiger Items',
                    position: 'outer-middle'
                },
                min: 0,
                max: <%= max.nonzero? || 1 %>,
                tick: {
                    format: function(x) { return x % 1 === 0 ? x : ''; }
                },
                padding: {top: 0, bottom: 20}
            }
        },
        line: {
            connectNull: true
        },
        legend: {
            hide: false
        }
    });
</script>

<% unless without_table %>
    <div>
      <p>
        <b>Höchste Lösungswahrscheinlichkeit (viertes Quartil):</b>
        <% if results.size < 3 %>
            -
        <% else %>
            <% first = true %>
            <% test.items.each do |i| %>
                <% if items["data"].has_key?(i.id.to_s) && items["data"][i.id.to_s]["prob"] > items["4th"] %>
                    <% unless first %>
                        <%= ", " %>
                    <% end %>
                    <% first = false %>
                    <%= i.shorthand %>
                <% end %>
            <% end %>
            <% if first %> - <% end %>
        <% end %>
      </p>
      <p>
        <b>Geringste Lösungswahrscheinlichkeit (erstes Quartil):</b>
        <% if results.size < 3 %>
            -
        <% else %>
            <% first = true %>
            <% test.items.each do |i| %>
                <% if items["data"].has_key?(i.id.to_s) && items["data"][i.id.to_s]["prob"] < items["1st"] %>
                    <% unless first %>
                        <%= ", " %>
                    <% end %>
                    <% first = false %>
                    <%= i.shorthand %>
                <% end %>
            <% end %>
            <% if first %> - <% end %>
        <% end %>
      </p>


      <table class="table table-striped" id="table<%=key%>">
        <thead>
        <th>
          Zeitpunkt
        </th>
        <th>
          Richtig gelöste Items
        </th>
        <th>
          Falsch gelöste Items
        </th>
        <th>
          Anzahl richtig gelöster Items
        </th>
        <th>
          Anzahl falsch gelöster Items
        </th>
        <th>
          Lösungswahrscheinlichkeit in %
        </th>
        </thead>
        <tbody>
        <% results.sort_by {|x| x.measurement.date}.each do |r| %>
            <% unless r.score.nil? %>
                <tr>
                  <td>
                    <%= r.measurement.date.to_date.strftime("%d.%m.%Y")%>
                  </td>
                  <td>
                    <%temp=""%>
                    <%count =0 %>
                    <% r.items.each_with_index do |item, i| %>
                        <%if r.items[i+1].nil?||count==r.count_1-1%>
                            <% if r.responses[i] ==  1 %>
                                <%count =count+1 %>
                              <%temp = temp + Item.find(r.items[i]).shorthand%>
                            <%end%>
                        <%else%>
                            <% if r.responses[i] ==  1 %>
                                <%temp = temp + Item.find(r.items[i]).shorthand + ", "%>
                            <%end%>
                        <% end %>
                    <% end %>
                    <%=temp%>
                  </td>
                  <td>
                    <%temp=""%>
                    <%count =0 %>
                    <% r.items.each_with_index do |item, i| %>
                        <%if r.items[i+1].nil?||count==r.count_0-1%>
                            <% if r.responses[i] ==  0 %>
                                <%count =count+1 %>
                                <%temp = temp + Item.find(r.items[i]).shorthand%>
                            <%end%>
                        <%else%>
                            <% if r.responses[i] ==  0 %>
                                <%temp = temp + Item.find(r.items[i]).shorthand + ", "%>
                            <%end%>
                        <% end %>
                    <% end %>
                    <%=temp%>
                  </td>
                  <td>
                    <%= r.count_1 %>
                  </td>
                  <td>
                    <%= r.count_0 %>
                  </td>
                  <td>
                    <%= (r.total * 100).round(1)%>
                  </td>
                </tr>
            <% end %>
        <% end %>
        </tbody>
      </table>
    </div>
<%end%>
<script>
    //generate pdf
    function generatePDF(withTable, key) {
        d3.selectAll("path").attr("fill", "none");
        d3.selectAll(".tick line, path.domain").attr("stroke", "black");
        d3.selectAll(".c3-line-student").attr("stroke-width", "3px");
        d3.selectAll(".c3-line-n25").attr("stroke-dasharray", "10,10");
        d3.selectAll(".c3-line-n50").attr("stroke-dasharray", "10,10");
        d3.selectAll(".c3-line-n75").attr("stroke-dasharray", "10,10");
        //Convert SVG to PNG
        canvas = document.getElementById("drawingArea");
        //Hier kann man versuchen das Bild noch etwas "klarer" zu machen
        //temporary resize of svg, otherwise canvas and png is as big as svg
        eval("chart"+key).resize({width:700, height:300});
        canvg(canvas, $('#svgFor' + key)[0].outerHTML.trim());
        eval("chart"+key).resize({height:320});
        eval("chart"+key).resize();
        var data = canvas.toDataURL("image/png");
        //build pdf-content
        var docDefinition = {
            pageSize: 'A4',
            content: [
                {
                    columns:[
                        {
                            width:'auto',
                            stack:[
                                {image: levumiPic,
                                    width: 40
                                }
                            ]
                        },
                        {text:
                            'Levumi Schüleransicht '+studentsCrypt['<%=@group.id%>'][<%=@student.id%>],
                            fontSize: 15,
                            margin: [0, 10, 0, 0]
                        }
                    ]
                },
                {text:
                    '<%=test.name%> - <%=test.level%>',
                    style: 'subheader'
                },
                {image: data,
                    width: 480,
                    height: 250,
                    margin: [0,15,0,0]
                }],
            styles: {
                subheader: {
                    fontSize: 13,
                    margin: [50, 0, 5, 5]
                }
            }
        };

        if(withTable){
            generateTable(docDefinition, key, false);
        }
        //open PDF in new window
        //Alternativen:
        //print the PDF
        //  pdfMake.createPdf(docDefinition).print();
        //open PDF in viewer
        //pdfMake.createPdf(docDefinition).open();
        // download the PDF
        pdfMake.createPdf(docDefinition).download('Schüleransicht von '+studentsCrypt['<%=@group.id%>'][<%=@student.id%>]+' - <%=test.name%>.pdf');

    }
</script>




